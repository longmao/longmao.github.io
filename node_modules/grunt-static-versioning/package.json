{
  "name": "grunt-static-versioning",
  "description": "Version static assets.",
  "version": "0.2.2",
  "homepage": "https://github.com/canvaspop/grunt-static-versioning",
  "author": {
    "name": "CanvasPop",
    "url": "http://github.com/canvaspop/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/canvaspop/grunt-static-versioning.git"
  },
  "bugs": {
    "url": "https://github.com/canvaspop/grunt-static-versioning/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/canvaspop/grunt-static-versioning/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {},
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-cssmin": "~0.6.1",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt-contrib-jshint": "~0.6.3",
    "grunt-contrib-clean": "~0.5.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "versioning",
    "assets"
  ],
  "readme": "# grunt-static-versioning [![Build Status](https://secure.travis-ci.org/canvaspop/grunt-static-versioning.png?branch=master)](http://travis-ci.org/canvaspop/grunt-static-versioning)\n\n> Version static assets\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-static-versioning --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-static-versioning');\n```\n\n**NOTE: This plugin requires some extra work on your end. It will create the versioned assets and a config file (PHP and JSON at the moment with more to come), but you will need to write an adapter to use that file. There will be examples in this repo under the `examples` directory.**\n\n### Options\n\n#### cwd\n\nType: `String`  \nDefault: ''\n\nSpecify the location of the outputted files. This is generally the root folder of the web project, e.g. the public directory. This path is **excluded** from the final file output.\n\n#### env\n\nType: `String`  \nDefault: 'prod'\n\nSpecify which files the task will copy over to the destination directory. Can be: `prod` or `dev`.\n\n#### output\n\nType: `String`  \nDefault: 'json'\n\nSpecify the type of config file to generate. This will generate an `assets.config.[ EXTENSION ]` file which can be used to insert the proper files in the source. The config file will only contain paths to development or minified files based on the `env` option. Can be: `json` or `php`.\n\n#### outputConfigDir\n\nType: `String`  \nDefault: ''\n\nSpecify the location where the config file will be generated. If left empty, it will used the `cwd` option.\n\n#### namespace\n\nType: `String`  \nDefault: 'static.assets'\n\nNamespace wrapping the file assets config generated file.\n\n### Files array options\n\n#### assets\n\nType: `Array`  \nDefault: null\n\nAn array of files that will be versioned. They can be manually entered or leveraged from the `uglify` and `cssmin` tasks. **NOTE: If the files are provided manually, they MUST exist. This task does NOT concat/minify any files, it simply renames and copies existing files to proper destination.**\n\n#### dest\n\nType: `String`  \nDefault: ''\n\nOffers an additional level of organization. The task options' `dest` paramater provided access to the web public folder while this option offers the organizational directories. E.g. `js` and `css`.\n\n#### type\n\nType: `String`  \nDefault: ''\n\nThis option is used to create structure to the config object the task creates. Can be: `js` or `css`.\n\n#### ext\n\nType: `String`  \nDefault: ''\n\nThe extension to apply to the files. Files will follow the naming pattern: `[filename].[md5_hash].[ext]`. E.g.: `.js`, `.css`, `.min.js`, `.min.css`.\n\n#### key\n\nType: `String`  \nDefault: ''\n\nThe key is used to organize the files in the config file. The same key can be used multiple times to organized multiples files together.\n\n#### bypass\n\nType: `Boolean`  \nDefault: false\n\nIf set to true, the file will bypass versioning and simply append the given extension.\n\n### Usage Examples\n\n#### Example config\n\n```javascript\ngrunt.initConfig({\n  versioning: {               // Task\n    options: {                // Task options\n      cwd: ''\n    },\n    dist: {                   // Target\n      options: {              // Target options\n      },\n      files: [{\n        assets: [{\n            src: [ 'file1.js', 'file2.js' ],\n            dest: 'tmp/js/main.min.js'\n        }, {\n            src: [ 'plugin1.js', 'plugin2.js' ],\n            dest: 'tmp/js/plugin.min.js'\n        }],\n        key: 'global',\n        dest: 'js',\n        type: 'js',\n        ext: '.min.js'\n      }, {\n        assets: [{\n            src: [ 'main.css' ],\n            dest: 'tmp/css/main.min.css'\n        }],\n        key: 'global',\n        dest: 'css',\n        type: 'css',\n        ext: '.min.css'\n      }]\n    }\n  }\n});\n\ngrunt.loadNpmTasks('grunt-static-versioning');\n\ngrunt.registerTask('default', ['versioning']);\n```\n\n#### Leveraging other tasks\n\nThis task is built to leverage other existing tasks. Instead of manually providing the files array, it can be read from the `uglify` and `cssmin` tasks.\n\n```javascript\ngrunt.initConfig({\n  cssmin: {\n    main: {\n      files: [{\n        src: [ 'main.css' ],\n        dest: 'tmp/main.min.css'\n      }]\n    }\n  },\n\n  uglify: {\n    main: {\n      files: [{\n        src: [\n          'file1.js',\n          'file2.js',\n          'components/test/test.js'\n        ],\n        dest: 'tmp/main.min.js'\n      }]\n    },\n    plugin: {\n      files: [{\n        src: [\n          'file3.js',\n          'file4.js'\n        ],\n        dest: 'tmp/plugin.min.js'\n      }]\n    }\n  },\n\n  versioning: {\n    options: {\n      cwd: 'public',\n      outputConfigDir: 'public/config'\n    },\n    dist: {\n      files: [{\n        assets: '<%= uglify.main.files %>',\n        key: 'global',\n        dest: 'js',\n        type: 'js',\n        ext: '.min.js'\n      }, {\n        assets: '<%= uglify.plugin.files %>',\n        key: 'global',\n        bypass: true,\n        dest: 'js',\n        type: 'js',\n        ext: '.min.js'\n      }, {\n        assets: '<%= cssmin.main.files %>',\n        key: 'global',\n        dest: 'css',\n        type: 'css',\n        ext: '.min.css'\n      }]\n    }\n  }\n});\n\ngrunt.loadNpmTasks('grunt-contrib-cssmin');\ngrunt.loadNpmTasks('grunt-contrib-uglify');\ngrunt.loadNpmTasks('grunt-static-versioning');\n\ngrunt.registerTask('default', ['uglify', 'cssmin', 'versioning']);\n```\n\nThe above example would output:\n* `public/js/main.[ MD5_HASH ].min.js`\n* `public/js/plugin.min.js` (no hash because of `bypass` option)\n* `public/css/main.[ MD5_HASH ].min.css`\n* `public/config/assets.config.json`\n\n## Sample assets.config\n\n### JSON\n\n#### Prod\n\n```javascript\n{\n  \"staticAssets\": {\n    \"global\": {                // <--- 'key' option\n      \"js\": [\n        \"/js/main.c2e864c8.min.js\",\n        \"/js/plugin.min.js\"\n      ],\n      \"css\": [\n        \"/css/main.b6f17edb.min.css\"\n      ]\n    },\n    \"all\": {                   // <--- 'key' option\n      \"js\": [\n        \"/js/all.625a4fd0.min.js\"\n      ],\n      \"css\": []\n    }\n  }\n}\n```\n\n#### Dev\n\n```javascript\n{\n  \"staticAssets\": {\n    \"global\": {                // <--- 'key' option\n      \"js\": [\n        \"/js/file1.js\",\n        \"/js/file2.js\",\n        \"/js/test.js\",\n        \"/js/file3.js\",\n        \"/js/file4.js\"\n      ],\n      \"css\": [\n        \"/css/main.css\"\n      ]\n    },\n    \"all\": {                   // <--- 'key' option\n      \"js\": [\n        \"/js/file1.js\",\n        \"/js/file2.js\",\n        \"/js/file3.js\",\n        \"/js/file4.js\"\n      ],\n      \"css\": []\n    }\n  }\n}\n```\n\n### PHP\n\n#### Prod\n\n```php\n<?php\nreturn array(\n    'staticAssets' => array(\n        'global' => array(\n            'css' => array(\n                'css/main.b6f17edb.css',\n            ),\n            'js' => array(\n                'js/main.c2e864c8.js',\n                'js/plugin.24d54461.js',\n            ),\n        ),\n        'all' => array(\n            'css' => array(\n            ),\n            'js' => array(\n                'js/all.625a4fd0.js',\n            ),\n        ),\n    )\n);\n```\n\n#### Dev\n\n```php\n<?php\nreturn array(\n    'staticAssets' => array(\n        'global' => array(\n            'css' => array(\n                '/css/main.css',\n            ),\n            'js' => array(\n                '/js/file1.js',\n                '/js/file2.js',\n                '/js/test.js',\n                '/js/file3.js',\n                '/js/file4.js',\n            ),\n        ),\n        'all' => array(\n            'css' => array(\n            ),\n            'js' => array(\n                '/js/file1.js',\n                '/js/file2.js',\n                '/js/file3.js',\n                '/js/file4.js',\n            ),\n        ),\n    )\n);\n```\n\n## Release history\n\n* 2014-04-01 0.2.2\n* 2013-12-03 0.2.1\n* 2013-09-17 0.2.0\n* 2013-08-26 0.1.1 Initial release. Not yet officially released.\n* 2013-08-26 0.1.0 Initial release. Not yet officially released.\n\n## License\n\nCopyright (c) 2013 CanvasPop\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-static-versioning@0.2.2",
  "_shasum": "1d5c076169dd4e4ab51bd36c17332ca450c3027c",
  "_from": "grunt-static-versioning@^0.2.2",
  "_resolved": "https://registry.npmjs.org/grunt-static-versioning/-/grunt-static-versioning-0.2.2.tgz"
}
